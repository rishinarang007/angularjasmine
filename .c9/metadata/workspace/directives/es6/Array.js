{"changed":true,"filter":false,"title":"Array.js","tooltip":"/directives/es6/Array.js","value":"var x = new Array(23); //......................\nconsole.log(x)\n\nvar x = new Array(23,34,23,23); //23,34,23,23\nconsole.log(x)\n\nvar y = Array.of(12,34,23,12)\nconsole.log(y) //[12,34,23,12]\nconsole.log(y.length) //4\n\nvar x = new Array(23); //......................\nconsole.log(x)\n\nvar x = new Array(23,34,23,23); //23,34,23,23\nconsole.log(x)\n\nvar y = Array.of(12)\nconsole.log(y) //[12]\nconsole.log(y.length) //1\n\n\n\nvar y = Array.of(12,34,23,12)\nconsole.log(y) //[12,34,23,12]\nconsole.log(y.length) //4\n\ndescribe('Arrays', function() {\n\t\n\tit('should return the first matching element using find', function() {\n\t\tvar ary = [1,5,10];\n\t\tvar match = ary.find(item => item > 8);\n\t\texpect(match).toBe(10);\n\t});\n\n\tit('should return the first matching index using findIndex', function() {\n\t\tvar match = [1,5,10].findIndex(item => item > 3);\n\t\texpect(match).toBe(1);\n\t});\n\n\tit('should fill in the entire array when fill is called', function() {\n\t\tvar ary = [1,2,3,4,5];\n\t\tary.fill('a');\n\t\texpect(ary[3]).toBe('a');\n\t});\n\n\tit('should fill in some of the array when fill is called with args', function() {\n\t\tvar ary = [1,2,3,4,5];\n\t\tary.fill('a', 2, 3); // [1,2,'a',4,5]\n\t\texpect(ary[2]).toBe('a');\n\t\texpect(ary[3]).toBe(4);\n\t});\n\n\tit('should copy elements with copyWithin', function() {\n\t\tvar ary = [1,2,3,4]; //[1,2,1,2]\n\t\tary.copyWithin(0,-2); //[3,4,3,4]\n\t\texpect(ary[0]).toBe(3);\n\t\texpect(ary[1]).toBe(4);\n\t});\n\n\tit('should create a new array with 1 arg when given 1 arg when of is called', function() {\n\t\tvar ary = new Array(3);\n\t\tvar ofAry = Array.of(3);\n\t\texpect(ary.length).toBe(3);\n\t\texpect(ofAry.length).toBe(1);\n\t});\n\n\tit('should create a new array from an array-like object when from is called', function() {\n\t\tvar arrayLike = document.querySelectorAll('div');\n\t\texpect(arrayLike.forEach).toBe(undefined);\n\n\t\tvar fromArray = Array.from(arrayLike);\n\t\texpect(fromArray.forEach).toBeDefined();\n\t});\n\n\tit('should return entries from the entries function', function() {\n\t\tvar a = ['Joe','Jim','John'];\n\t\tvar entries = a.entries();\n\n\t\tvar firstEntry = entries.next().value;\n\t\texpect(firstEntry[0]).toBe(0);\n\t\texpect(firstEntry[1]).toBe('Joe');\n\t});\n\n\tit('should enumerate keys with the keys function', function() {\n\t\tvar a = ['Joe','Jim','John'];\n\t\tvar keys = a.keys();\n\n\t\tvar firstKey = keys.next().value;\n\t\texpect(firstKey).toBe(0);\n\t});\n\n\tdescribe('comprehensions', function() {\n\t\tit('should create arrays easily', function() {\n\t\t\tvar ary = [for (i of [1,2,3]) i]; //[1,2,3]\n\t\t\texpect(ary[2]).toBe(3);\n\t\t\tvar ary2 = [for (i of [1,2,3]) i*i]; //[1,4,9]\n\t\t\texpect(ary2[2]).toBe(9);\n\t\t\tvar ary3 = [for (i of [1,2,3]) if (i < 3) i]; //[1,2]\n\t\t\texpect(ary3.length).toBe(2);\n\n\t\t\tvar ary4 = [for (first of ['William', 'John', 'Blake'])\n\t\t\t\tfor (middle of ['Robert','Andrew','John'])\n\t\t\t\tif(first != middle) (first + ' ' + middle + ' Smith')]\n\t\t\tconsole.log(ary4);\n\t\t\texpect(ary4[0]).toBe('William Robert Smith');\n\t\t});\n\t});\n})","undoManager":{"mark":7,"position":14,"stack":[[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":81,"column":2},"action":"insert","lines":["describe('Arrays', function() {","\t","\tit('should return the first matching element using find', function() {","\t\tvar ary = [1,5,10];","\t\tvar match = ary.find(item => item > 8);","\t\texpect(match).toBe(10);","\t});","","\tit('should return the first matching index using findIndex', function() {","\t\tvar match = [1,5,10].findIndex(item => item > 3);","\t\texpect(match).toBe(1);","\t});","","\tit('should fill in the entire array when fill is called', function() {","\t\tvar ary = [1,2,3,4,5];","\t\tary.fill('a');","\t\texpect(ary[3]).toBe('a');","\t});","","\tit('should fill in some of the array when fill is called with args', function() {","\t\tvar ary = [1,2,3,4,5];","\t\tary.fill('a', 2, 3); // [1,2,'a',4,5]","\t\texpect(ary[2]).toBe('a');","\t\texpect(ary[3]).toBe(4);","\t});","","\tit('should copy elements with copyWithin', function() {","\t\tvar ary = [1,2,3,4]; //[1,2,1,2]","\t\tary.copyWithin(0,-2); //[3,4,3,4]","\t\texpect(ary[0]).toBe(3);","\t\texpect(ary[1]).toBe(4);","\t});","","\tit('should create a new array with 1 arg when given 1 arg when of is called', function() {","\t\tvar ary = new Array(3);","\t\tvar ofAry = Array.of(3);","\t\texpect(ary.length).toBe(3);","\t\texpect(ofAry.length).toBe(1);","\t});","","\tit('should create a new array from an array-like object when from is called', function() {","\t\tvar arrayLike = document.querySelectorAll('div');","\t\texpect(arrayLike.forEach).toBe(undefined);","","\t\tvar fromArray = Array.from(arrayLike);","\t\texpect(fromArray.forEach).toBeDefined();","\t});","","\tit('should return entries from the entries function', function() {","\t\tvar a = ['Joe','Jim','John'];","\t\tvar entries = a.entries();","","\t\tvar firstEntry = entries.next().value;","\t\texpect(firstEntry[0]).toBe(0);","\t\texpect(firstEntry[1]).toBe('Joe');","\t});","","\tit('should enumerate keys with the keys function', function() {","\t\tvar a = ['Joe','Jim','John'];","\t\tvar keys = a.keys();","","\t\tvar firstKey = keys.next().value;","\t\texpect(firstKey).toBe(0);","\t});","","\tdescribe('comprehensions', function() {","\t\tit('should create arrays easily', function() {","\t\t\tvar ary = [for (i of [1,2,3]) i]; //[1,2,3]","\t\t\texpect(ary[2]).toBe(3);","\t\t\tvar ary2 = [for (i of [1,2,3]) i*i]; //[1,4,9]","\t\t\texpect(ary2[2]).toBe(9);","\t\t\tvar ary3 = [for (i of [1,2,3]) if (i < 3) i]; //[1,2]","\t\t\texpect(ary3.length).toBe(2);","","\t\t\tvar ary4 = [for (first of ['William', 'John', 'Blake'])","\t\t\t\tfor (middle of ['Robert','Andrew','John'])","\t\t\t\tif(first != middle) (first + ' ' + middle + ' Smith')]","\t\t\tconsole.log(ary4);","\t\t\texpect(ary4[0]).toBe('William Robert Smith');","\t\t});","\t});","})"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":1,"column":0},"action":"insert","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":1,"column":0},"end":{"row":2,"column":0},"action":"insert","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":14,"column":25},"action":"insert","lines":["var x = new Array(23); //......................","console.log(x)","","var x = new Array(23,34,23,23); //23,34,23,23","console.log(x)","","var y = Array.of(12)","console.log(y) //[12]","console.log(y.length) //1","","","","var y = Array.of(12,34,23,12)","console.log(y) //[12,34,23,12]","console.log(y.length) //4"]}]}],[{"group":"doc","deltas":[{"start":{"row":6,"column":20},"end":{"row":6,"column":21},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":6,"column":21},"end":{"row":6,"column":22},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":6,"column":22},"end":{"row":6,"column":23},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":6,"column":23},"end":{"row":6,"column":85},"action":"insert","lines":["urn values into an instance of a sub-constructor of Array then"]}]}],[{"group":"doc","deltas":[{"start":{"row":14,"column":25},"end":{"row":15,"column":0},"action":"insert","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":15,"column":0},"end":{"row":16,"column":0},"action":"insert","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":16,"column":0},"end":{"row":30,"column":25},"action":"insert","lines":["var x = new Array(23); //......................","console.log(x)","","var x = new Array(23,34,23,23); //23,34,23,23","console.log(x)","","var y = Array.of(12)","console.log(y) //[12]","console.log(y.length) //1","","","","var y = Array.of(12,34,23,12)","console.log(y) //[12,34,23,12]","console.log(y.length) //4"]}]}],[{"group":"doc","deltas":[{"start":{"row":6,"column":0},"end":{"row":9,"column":0},"action":"remove","lines":["var y = Array.of(12) //urn values into an instance of a sub-constructor of Array then","console.log(y) //[12]","console.log(y.length) //1",""]}]}],[{"group":"doc","deltas":[{"start":{"row":6,"column":0},"end":{"row":7,"column":0},"action":"remove","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":6,"column":0},"end":{"row":7,"column":0},"action":"remove","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":6,"column":0},"end":{"row":7,"column":0},"action":"remove","lines":["",""]}]}]]},"ace":{"folds":[],"scrolltop":1320,"scrollleft":0,"selection":{"start":{"row":24,"column":25},"end":{"row":24,"column":25},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":72,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1424157546842}